# -*- coding: utf-8 -*-
"""QTM340_Project_AmazonReviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OsczyV3-T2JaHK7u0FANMojminkhLeMF

# Introduction
In this colab, we present an example code snippet to **find target products** from the metadata we provide, e.g., based on the product titles.

In addition, we also show how to **align products with their reviews**, and find out the time spans that the products are on market based on their review times.
"""

import os
import json
import gzip
import pandas as pd
from urllib.request import urlopen

import random
import numpy as np
from tqdm import tqdm_notebook as tqdm
from collections import defaultdict
from gensim.models.ldamulticore import LdaMulticore
from gensim.test.utils import datapath

!wget https://datarepo.eng.ucsd.edu/mcauley_group/data/amazon_v2/categoryFiles/Arts_Crafts_and_Sewing.json.gz
!wget https://datarepo.eng.ucsd.edu/mcauley_group/data/amazon_v2/categoryFiles/Video_Games.json.gz

# load arts_crafts_sewing data
crafts_data = []
with gzip.open('Arts_Crafts_and_Sewing.json.gz', 'r') as f:
    for l in tqdm(f):
        crafts_data.append(json.loads(l))

# load video game data
gaming_data = []
with gzip.open('Video_Games.json.gz', 'r') as f:
    for l in tqdm(f):
        gaming_data.append(json.loads(l))

"""# Exploratory Data Analysis"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
import nltk
nltk.download('punkt')
from nltk.corpus import stopwords
import seaborn as sns
import matplotlib.pyplot as plt

crafts_df = pd.DataFrame.from_dict(crafts_data)
gaming_df = pd.DataFrame.from_dict(gaming_data)

crafts_df.head(3)
# gaming_df.head(3)

"""### Check the distribution of ratings:

- Skew towards giving 5/5 ratings in the reviews.
"""

sns.countplot(x='overall', data=crafts_df)
plt.title('Distribution of Overall Ratings in Crafts and Sewing Product Reviews')
plt.show()

sns.countplot(x='overall', data=gaming_df)
plt.title('Distribution of Overall Ratings in Video Games Product Reviews')
plt.show()

"""### Plotting Word Cloud in the Review Text:


I filtered out the stopwords to make the word cloud more meaningful. I also found that the most frequent words include functional words like 'word,' 'use,' 'used,' so I decided to filter these words out to focus on the actual sentiments and trends in the review data.


"""

from wordcloud import WordCloud, STOPWORDS

def plot_word_cloud(text_data):
    # Ensure text_data is a string and is not empty
    if not isinstance(text_data, str) or not text_data:
        raise ValueError("Input must be a non-empty string.")

    wordcloud = WordCloud(
        width=3000,
        height=2000,
        background_color='black',
        stopwords=STOPWORDS
    ).generate(text_data)

    fig = plt.figure(
        figsize=(10, 7),
        facecolor='k',
        edgecolor='k'
    )

    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.tight_layout(pad=0)
    plt.show()

# Concatenate all text data in the 'reviewText' column into a single string and plot

all_crafts_reviews_text = ' '.join(crafts_df['reviewText'].dropna())
plot_word_cloud(all_crafts_reviews_text)


words_to_filter = ['product', 'use', 'used']
for word in words_to_filter:
    all_crafts_reviews_text = all_crafts_reviews_text.replace(word, '')


plot_word_cloud(all_crafts_reviews_text)

all_gaming_reviews_text = ' '.join(gaming_df['reviewText'].dropna())
words_to_filter = ['product', 'use', 'used']
for word in words_to_filter:
    all_gaming_reviews_text = all_gaming_reviews_text.replace(word, '')


plot_word_cloud(all_gaming_reviews_text)

"""### Explore the relationship between the review rating and the number of votes (helpfulness of the review):"""

crafts_df['vote'] = pd.to_numeric(crafts_df['vote'], errors='coerce').fillna(0).astype(int)

sns.scatterplot(x='overall', y='vote', data=crafts_df)
plt.title('Relationship between Vote and Overall Rating for Crafts Products')
plt.xlabel('Overall Rating')
plt.ylabel('Number of Votes')

plt.yticks(range(0, int(max(df['vote'])) + 1, 50))

plt.show()

from scipy.stats import f_oneway

f_statistic, p_value = f_oneway(crafts_df['vote'][df['overall'] == 1],
                                 crafts_df['vote'][df['overall'] == 2],
                                 crafts_df['vote'][df['overall'] == 3],
                                 crafts_df['vote'][df['overall'] == 4],
                                 crafts_df['vote'][df['overall'] == 5])

print(f'F-statistic: {f_statistic}, p-value: {p_value}')

# Pairwise comparisons since ANOVA is significant
from statsmodels.stats.multicomp import pairwise_tukeyhsd

tukey_results = pairwise_tukeyhsd(crafts_df['vote'], crafts_df['overall'])
print(tukey_results)

"""### Explore the relationship between the length of the review summary and the number of votes:"""

from nltk.tokenize import word_tokenize

crafts_df['review_text_length'] = crafts_df['reviewText'].apply(lambda x: len(word_tokenize(x)) if isinstance(x, str) else 0)

sns.lineplot(x='review_text_length', y='vote', data=crafts_df, sort=False)
plt.title('Relationship between Review Length and Vote')
plt.xlabel('Review Text Length (in words)')
plt.ylabel('Number of Votes')
plt.yticks(range(0, int(max(crafts_df['vote'])) + 1, 50))
plt.show()

sns.lineplot(x='overall', y='review_text_length', data=crafts_df, sort=False)
plt.title('Relationship between Review Length and the overall rating')
plt.xlabel('Rating Scale from 1-5')
plt.ylabel('Review Text Length (in words)')
plt.show()

"""### Explore the relationship between image and vote:

One might assume that having images attaching to review texts might also boost the number of 'vote' the review receives.

"""

# Replace NaN with a boolean indicating the presence of an image
crafts_df['has_image'] = ~crafts_df['image'].isnull().map({True: 'no image', False: 'with image'})


# Plotting
plt.figure(figsize=(12, 8))

# Box plot
sns.boxplot(x='has_image', y='vote', data=crafts_df)
plt.title('Relationship between Vote and Image Presence')
plt.xlabel('Has Image')
plt.ylabel('Number of Votes')

plt.show()

"""### Testing out LDA:"""

def tokenize_summaries (reviewText):
  stop = set(stopwords.words ('english'))
  tokens = nltk.word_tokenize(reviewText)
  tokens = [token.lower () for token in tokens if token.isalpha() and token not in stop]
  return tokens

crafts_df['tokens'] = crafts_df['reviewText'].progress_apply (lambda x: tokenize_summaries (x))

# Construct a dictionary of words from the corpus
dictionary = gensim.corpora.Dictionary(crafts_df['tokens'])
print (f"Before filtering: {len (dictionary)}")

# Filter the dictionary to meet frequency thresholds
dictionary.filter_extremes(no_below=10,
                           no_above=0.5,
                           keep_n=10000)
print (f"After filtering: {len (dictionary)}")

# The map of wordids back the words
id2token = {id: token for token, id in dictionary.token2id.items()}

# Construction of the corpus in the format that gensim expects
corpus = [dictionary.doc2bow(doc) for doc in crafts_df['tokens']]

lda = LdaMulticore(corpus, id2word=id2token, num_topics=10, passes=5, iterations=50)

topics = lda.show_topics(num_topics=10, num_words=10, log=True, formatted=False)

# We'll print the top words associated with each topic
for topic_num, topic_words in topics:
  topic_rep = " ".join ([f"{w}({p:.4f})" for w,p in topic_words])
  print (f"Topic {topic_num}: {topic_rep}")